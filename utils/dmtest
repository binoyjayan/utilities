#!/bin/bash
###########################################################################
#                                                                         #
#     DMTEST : dm-crypt module tester                                     #
#                                                                         #
#     Author: Binoy Jayan                                                 #
#     Date Written : February 9 2017                                      #
#                                                                         #
#     Description                                                         #
#     ------------                                                        #
#     Tests the dm-crypt module with Luks volume                          #
#                                                                         #
#     Features:                                                           #
#                                                                         #
#      - Test with cat, dd, bonnie++ and fio                              #
#      - Test on loop device and real hdd                                 #
#                                                                         #
#     By default, it runs all tests on an encrypted loop device           #
#                                                                         #
#     For options run the following command                               #
#                                                                         #
#        dmtest -h                                                        #
#                                                                         #
###########################################################################

# Default options; Can be changed at run time using cmdline options
BASESTR=`basename $0`
OUTFILE=`tty`
OUTFLAG=false
TMP="/tmp"
MNT="/mnt/dmtest"
HDDEV=/dev/vdb
BLKDEV=/dev/loop0
CRDEV=crdev
CRYPTDEV=/dev/mapper/$CRDEV
LOOPFILE=HDB.hdd
LOOPSIZE=256
BLKSIZE=256
FILESIZE=128
RAMSIZE=64
LOOPFLAG=true
TEST=all
PASS="11111"
CONFIRM=false
ECHO=""

usage()
{
      echo ""
      echo "Usage: $BASESTR <option> [parameter] [option2] [param2]..."
      echo ""
      echo "Options"
      echo ""
      echo "-d <hdd>        : The disk volume used for testing. Default: $BLKDEV"
      echo "                : To use loop devices use the loop device name"
      echo "                : When used, loop device is created automatically"
      echo "                : Use the option -c along with this"
      echo "-s disksize     : Size of disk volume in MiB. Default: $BLKSIZE"
      echo "-r ramsize      : Size of ram in MiB [used with bonnie++]. Default: $RAMSIZE"
      echo "-f filesize     : File size to test bonnie++. Default: $FILESIZE"
      echo "                : For best results use twice the file size as the ram"
      echo "-c imgfile      : Create block img used with loop device. Default: $LOOPFILE"
      echo "-t name         : Run the test name. all to run all tests. Default: $TEST"
      echo "-l              : List the tests available. Use -t to select a test. Default: $TEST"
      echo "-p              : Change the passphrase for cryptsetup"
      echo "-g              : Don't run tests. Just echo cmds"
      echo "-o              : Test output file"
      echo "-y              : Do not ask for confirmation before running tests"
      echo "-h              : Display usage"
      echo ""
      echo "EXamples:"
      echo ""
      echo "$BASESTR"
      echo "$BASESTR -t all"
      echo "$BASESTR -t dd -d /dev/vdb"
      echo "$BASESTR -o out.log"
      echo "$BASESTR -y -o out.log"
      echo "$BASESTR -d /dev/sdb -o out.log -s 1024 -y"
      echo "$BASESTR -d /dev/vdb -o out.log -s 1024 -t cat"
      echo "$BASESTR -d /dev/vdb -o out.log -s  512 -t fio"
      echo "$BASESTR -d /dev/vdb -o out.log -s  512 -r 128 -f 256"
      echo "$BASESTR -d /dev/vdb -o out.log -s 1024 -r 384 -f 768"
      echo ""
      echo "NB: Do not use the busybox version of dd."
      echo "    Use the full fledged version. Compile from src if necessary"
      echo ""
}

check_su()
{
	ME=`whoami`
	if [ $ME != "root" ]; then
		echo "Run the script as a root or use sudo $BASESTR"
		echo ""
		exit
	fi
}

header()
{
	echo "--------------------------------------------------------------------------------" >> $OUTFILE
	echo "                   $1" >> $OUTFILE
	echo "--------------------------------------------------------------------------------" >> $OUTFILE
	echo "" >> $OUTFILE
}

list_tests()
{
	echo "--------------------------------------------------------------------------------" >> $OUTFILE
	echo "                   Available tests" >> $OUTFILE
	echo "--------------------------------------------------------------------------------" >> $OUTFILE
	echo "cat	Run cat test for verifying correctness"
	echo "dd	Run dd test on the encrypted volume"
	echo "bonnie	Run file system tests on a mounted volume using bonnie++"
	echo "fio	Run fio tests on the encrypted volume"
	echo ""
	echo "Choose a test as:"
	echo ""
	echo "$BASESTR -t cat        : Run only cat test"
	echo "$BASESTR -t cat        : Run all tests. This is the default"
	echo ""
	echo "For more info, run $BASESTR -h"
	echo ""
	exit
}

validate()
{
        # Validate that all pre-requisites exist

	if [ "$LOOPFLAG" == "false" ]; then
	        if [ ! -f "$HDDEV" ]; then
			echo "Could not find hdd file $HDDEV. Use -d to specify it"
			found=0
		fi
	else
		BLKSIZE=$LOOPSIZE
	fi

	# Validate the tests
	if [ "$TEST" != "all" ]; then
		case $TEST in
		cat)
			;&
		dd)
			;&
		bonnie)
			;&
		fio)
			;;
		*)
			echo "Invalid test $TEST. Use $BASESTR -l to list the tests"
			exit
		esac
	fi
	# Using 1 MiB less than the volume size as the cryptsetup saves
	# the header in the first 2048 KiB.
	CRSIZE=`expr $BLKSIZE - 2`
}

display_config()
{
	echo "--------------------------------------------------------------------------------"
	echo "Test configuration"
	echo "--------------------------------------------------------------------------------"
	echo ""
	if [ $LOOPFLAG == "true" ]; then
 	echo "Loop image			= $LOOPFILE [$LOOPSIZE MiB]"
	fi
 	echo "Block device			= $BLKDEV [$BLKSIZE MiB]"
	echo "Crypto device			= $CRYPTDEV"
	echo "Size used in device		= $CRSIZE MiB"
	echo "Ram size [for bonnie++]		= $RAMSIZE MiB"
	echo "File size [bonnie++]		= $FILESIZE MiB"
	echo "Test performed			= $TEST"
	if [ $OUTFLAG == "true" ]; then
	echo "Output file			= $OUTFILE"
	else
	echo "Output file			= stdin"
	fi
	echo ""
	echo "--------------------------------------------------------------------------------"
	echo ""
	echo "For help on changing configuration parameters, type:"
	echo ""
	echo "$BASESTR -h"
	echo ""
}

create_dev()
{
	if [ "$LOOPFLAG" == "true" ]
	then
		echo "Creating block image and loop device..."
		header "Loop device $LOOPFILE of size $BLKSIZE MiB"
		$ECHO dd if=/dev/zero of=$LOOPFILE bs=1M count=$BLKSIZE &>> $OUTFILE
		$ECHO losetup $BLKDEV $LOOPFILE
		echo "done."
	fi
}

remove_dev()
{
	if [ "$LOOPFLAG" == "true" ]
	then
		echo "Detaching loop device and removing block image..."
		$ECHO losetup -d $BLKDEV
		$ECHO rm -f $LOOPFILE
		echo "done."
	fi
}

test_cat()
{
	ALG=$1

	echo "Running cat test for correctness..."

	header "Test for correctness using cat"

	$ECHO echo -n $PASS | $ECHO cryptsetup -y -c $ALG -s 256 --hash sha256 luksFormat $BLKDEV >> $OUTFILE
	$ECHO echo -n $PASS | $ECHO cryptsetup luksOpen $BLKDEV $CRDEV >> $OUTFILE
	$ECHO echo "DM Table:" >> $OUTFILE
	# $ECHO dmsetup table --showkeys >> $OUTFILE
	$ECHO dmsetup table >> $OUTFILE
	$ECHO echo "" >> $OUTFILE
	$ECHO ls -l $CRYPTDEV >> $OUTFILE
	$ECHO echo "" >> $OUTFILE

	$ECHO echo "Writing data to $CRYPTDEV..." >> $OUTFILE
	if [ "$ECHO" == "" ];then
		echo '111111111122222222223333333333444444444455555555556666666666000' > $CRYPTDEV
		echo '111111111122222222223333333333444444444455555555556666666666000' > $TMP/data1.txt
	else
		$ECHO 'echo '111111111122222222223333333333444444444455555555556666666666000' > $CRYPTDEV'
		$ECHO 'echo '111111111122222222223333333333444444444455555555556666666666000' > $TMP/data1.txt'
	fi
	$ECHO echo "Reading back data from $CRYPTDEV..." >> $OUTFILE
	$ECHO dd if=$CRYPTDEV bs=1 count=64 of=$TMP/data2.txt &>> $OUTFILE
	$ECHO echo "Comparing..." >> $OUTFILE
	$ECHO echo "Original data:" >> $OUTFILE
	$ECHO cat $TMP/data1.txt &>> $OUTFILE
	$ECHO echo "Data read back:" >> $OUTFILE
	$ECHO cat $TMP/data2.txt &>> $OUTFILE
	$ECHO diff $TMP/data1.txt $TMP/data2.txt
	STATUS=$?

	# Time for the device to breathe
	$ECHO sleep 1
	$ECHO cryptsetup luksClose $CRDEV
	if [ "$STATUS" == "0" ]; then
		echo "The cat test is successful!" >> $OUTFILE
	else
		echo "The cat test failed!" >> $OUTFILE
		remove_dev
		exit
	fi
	echo "done"
	echo ""
}

test_dd()
{
	ALG=$1
	echo "Testing algorithm $ALG with dd..."
	header "Test with dd"

	$ECHO echo -n $PASS | $ECHO cryptsetup -y -c $ALG -s 256 --hash sha256 luksFormat $BLKDEV
	$ECHO echo -n $PASS | $ECHO cryptsetup luksOpen $BLKDEV $CRDEV

	echo "Peforming seq read on the first $CRSIZE MiB of the device" >> $OUTFILE &>> $OUTFILE
	echo "Invoke dd: dd if=$CRYPTDEV of=/dev/zero bs=1M count=$CRSIZE  iflag=direct" &>> $OUTFILE
	$ECHO time dd if=$CRYPTDEV of=/dev/zero bs=1M count=$CRSIZE  iflag=direct &>> $OUTFILE
	echo "" >> $OUTFILE

	echo "Peforming seq write on the first $CRSIZE MiB of the device" >> $OUTFILE &>> $OUTFILE
	echo "Invoke dd: dd if=/dev/zero of=$CRYPTDEV bs=1M count=$CRSIZE  oflag=direct" &>> $OUTFILE
	$ECHO time dd if=/dev/zero of=$CRYPTDEV bs=1M count=$CRSIZE  oflag=direct &>> $OUTFILE
	echo "" >> $OUTFILE

	# Time for the device to breathe
	$ECHO sleep 1
	$ECHO cryptsetup luksClose $CRDEV
	echo "done"
	echo ""
}

test_bonnie()
{
	ALG=$1
	echo "Testing algorithm $ALG with bonnie++..."
	header "Test with bonnie++"

	$ECHO echo -n $PASS | $ECHO cryptsetup -y -c $ALG -s 256 --hash sha256 luksFormat $BLKDEV
	$ECHO echo -n $PASS | $ECHO cryptsetup luksOpen $BLKDEV $CRDEV

	$ECHO mkfs.ext4 -j $CRYPTDEV &>> $OUTFILE

	echo "Mouting volume $CRYPTDEV on $MNT" >> $OUTFILE
	$ECHO mkdir -p $MNT &>> $OUTFILE
	$ECHO mount -t ext4 $CRYPTDEV $MNT &>> $OUTFILE

	echo "Invoking bonnie++ [bonnie++ -d $MNT -s $FILESIZE -m qemu -r $RAMSIZE -u root]" >> $OUTFILE

	$ECHO df -h $MNT >> $OUTFILE
	$ECHO df $MNT >> $OUTFILE
	$ECHO bonnie++ -d $MNT -s $FILESIZE -m qemu -r $RAMSIZE -u root &>> $OUTFILE

	# Time for the device to breathe
	$ECHO sleep 1
	$ECHO umount $MNT &>> $OUTFILE
	# Time for the device to breathe
	$ECHO sleep 1
	$ECHO cryptsetup luksClose $CRDEV
	echo "done"
	echo ""
}

test_fio()
{
	ALG=$1
	echo "Testing algorithm $ALG with fio..."
	header "Test with fio"

	$ECHO echo -n $PASS | $ECHO cryptsetup -y -c $ALG -s 256 --hash sha256 luksFormat $BLKDEV
	$ECHO echo -n $PASS | $ECHO cryptsetup luksOpen $BLKDEV $CRDEV

	echo "Random read:" >> $OUTFILE
	$ECHO fio --filename=$CRYPTDEV --direct=1 --iodepth=1 --rw=randread --bs=1M --size=${CRSIZE}M --group_reporting --numjobs=1 --name=test_randr &>> $OUTFILE
	echo "" >> $OUTFILE

	echo "Random write:" >> $OUTFILE
	$ECHO fio --filename=$CRYPTDEV --direct=1 --iodepth=1 --rw=randwrite --bs=1M --size=${CRSIZE}M --group_reporting --numjobs=1 --name=test_randw &>> $OUTFILE
	echo "" >> $OUTFILE

	# Time for the device to breathe
	$ECHO sleep 1
	$ECHO cryptsetup luksClose $CRDEV
	echo "done"
	echo ""
}

do_tests()
{
	STARTDATE=`date`
	STARTSEC=`date +"%s"`

	echo ""
	echo "Running test(s)..."
	echo ""

	if [ "$TEST" == "all" ]; then
		test_cat "aes-cbc-essiv:sha256"
		test_dd "aes-cbc-essiv:sha256"
		test_bonnie "aes-cbc-essiv:sha256"
		test_fio "aes-cbc-essiv:sha256"
	else
		test_$TEST "aes-cbc-essiv:sha256"
	fi

	ENDSEC=`date +"%s"`
	ENDDATE=`date`

	echo "Tests started at $STARTDATE and ended at $STARTDATE"
	TIMEDIFF=`expr $ENDSEC - $STARTSEC`
	MIN=`expr $TIMEDIFF / 60`
	SEC=`expr $TIMEDIFF % 60`
	echo "Elapsed time = $MIN minutes $SEC seconds"
	echo ""
}

# Main script execution
echo ""

found=0
while getopts "d:s:r:f:c:t:lgo:yph" opt; do
  found=1
  case $opt in
    d)
        BLKDEV=$OPTARG
	LOOPFLAG=false
        ;;
    s)
        BLKSIZE=$OPTARG
        ;;
    r)
        RAMSIZE=$OPTARG
        ;;
    f)
        FILESIZE=$OPTARG
        ;;
    c)
        LOOPFILE=$OPTARG
	LOOPFLAG=true
        ;;
    t)
        TEST=$OPTARG
        ;;
    l)
        list_tests
        ;;
    p)
	echo -n "Enter passphrase:"
	stty -echo
	read PASS
	stty echo
	echo ""
        ;;
    g)
        ECHO=echo
        ;;
    o)
        OUTFILE="$OPTARG"
        OUTFLAG=true
        ;;
    y)
	CONFIRM=true
	CONF="yes"
        ;;
    h)
	HELPFLAG=true
        ;;
    \?)
        echo ""
        echo "Invalid/insufficient arguments mentioned!"
        usage
	exit
        ;;
  esac
done

if [ "$HELPFLAG" == "true" ]; then
	usage
	exit
fi

validate
display_config

if [ $CONFIRM == "false" ]; then
	echo -n "Do you want to continue tests with the above config?(yes/no):"
	read CONF
fi

if [ "$CONF" != "yes" -a "$CONF" != "y" ]; then
	echo "Aborting operation!"
	exit
fi

if [ "$ECHO" == "" ]; then
	check_su
fi

DT=`date`
echo "" > $OUTFILE
echo "--------------------------------------------------------------------------------" >> $OUTFILE
echo " dm-crypt tests - $DT" >> $OUTFILE
echo "--------------------------------------------------------------------------------" >> $OUTFILE
echo "" >> $OUTFILE
 
create_dev
do_tests
remove_dev
echo ""
echo "" >> $OUTFILE

